#!/bin/bash
# ---
# Common helper functions for running docker images and logging into dockerhub
# ---

# docker login
# arg $1 - docker hub user
# arg $2 - docker hub password
function hubLogin {
  echo "$2" | docker login -u "$1" --password-stdin
}

# removes the docker
# arg $1 - the docker name
function dockerRemove {
  if [ "$(docker ps -aq -f name=${1})" ]; then
    # echo "if this following shows errors 'No such container:' next its fine as its doing a force rm"
    docker stop ${1} || true && docker rm ${1} || true
  fi
}

# -----
# starts a docker (docker run) if its not already running
# arg $1 - the name of the docker as in --name=${1}
# arg $2 - the arguments that would normall passed to a docker run
function dockerStart {
  if [ ! "$(docker ps -q -f name=${1})" ]; then
    # just in case it does exist but with status=exited fire a remove
    remove_docker ${1}
		docker run --name=${1} ${@:2}
  fi
}

# -----------------------------------
# starts a builder docker with a volume maps to gradle-docker and /project to the local dir
# maps port 8080 in case running tomcat server
# arg $1 - name of the docker
# arg $2 - the docker url, defaults to yakworks/alpine-java:jdk8-builder
function builderStart {
  durl=${2:-"yakworks/alpine-java:jdk8-builder"}
  start $1 -it \
    -p 8080:8080 \
	  -v `pwd`:/project -w /project \
		-v ~/.gradle-docker/:/root/.gradle/ \
		--network builder-net \
		-d $2
}

# -----------------------------------
# create a docker network if it does not exist
# arg $1 - network name
function dockerNetworkCreate {
  if [ ! "$(docker network ls | grep $1)" ]; then \
	  docker network create $1; \
	fi
}

# -----------------------------------
# starts a db docker with a volume maps for current dir (`pwd`) to /project
# arg $1 - name of the docker
# arg $2 - the docker url in format repo:image_tag
# arg $3 - the db_port mapping in form 3306:3306 (1433 for sql server etc)
# arg $4+ - 4th and beyond are env variables. use for for default password (MYSQL_ROOT_PASSWORD, SA_PASSWORD)
# example: dock db_start mysql-ndb mysql:5.7 13306:3306 MYSQL_ROOT_PASSWORD=123Foo
function db_start {
  # ACCEPT_EULA is for sql server, just an env var so won't matter that its set for others
  start $1 \
    --network builder-net \
    -v `pwd`:/project -w /project \
    -e ACCEPT_EULA=Y \
    -p $3  \
    -e $4 \
    -d $2
}

# -----
# meant to be run inside the mysql docker with docker exec
# $1 - host
# $2 - root password
# example: docker exec mysql-builder ./scripts/dock wait_for_mysql
function wait_for_mysql {
  host=${1:-127.0.0.1}
  echo "wait for mysql ..."
  while ! mysql -h $host --user=root --password=$2 -e "SELECT 1" >/dev/null 2>&1; do
    sleep 1
  done
}

# -----
# meant to be run inside the sql-server with docker exec
# $1 - host
# $2 - sa password
# example: docker exec sqlserver-builder ./scripts/dock wait_for_sqlserver
function wait_for_sqlserver {
  host=${1:-localhost}
  #/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'xxxx' -Q 'SELECT Name FROM sys.Databases'
  # sqlcmd -S $host -U SA -P $SA_PASSWORD -Q 'SELECT 1;'
  # for some reason sqlcmd needs to be fully qualified path for it to work on circleci
  while ! /opt/mssql-tools/bin/sqlcmd -S $host -U SA -P "$2" -Q 'SELECT Name FROM sys.Databases' >/dev/null 2>&1; do
    sleep 1
  done
}

# --- boiler plate function runner, keep at end of file ------
# BASH_SOURCE check will be true if this is run, false if imported into another script with `source`
if [[ "${#BASH_SOURCE[@]}" == 1 ]]; then
  source "$(dirname $0)/function_runner.sh"
fi
