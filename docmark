#!/bin/bash
# -----------------
# functions for running mkdocs
# depends on bin/github_pages script
# ------------------

DOCMARK_DOCKER_IMAGE=yakworks/docmark

function dockmark-serve {
  cp_readme_index
  dockmark_run
}

# Copies readme and replaces links that went into docs
function cp_readme_index {
  rm -f docs/index.md
  cp README.md docs/index.md
  # replace the (docs/ text in links as they are in same dir now, ex [foo](docs/bar.md) will become [foo](bar.md)
  sed -i -e "s~(\s*docs\/~(~g" docs/index.md
}

# build the docs, should be run inside the docmark docker
function docmark_build {
  cp_readme_index
  docmark build --site-dir build/site
}

# builds the groovydocs and copies them into site/api
function copyGroovydocToApi {
  cp -r build/docs/groovydoc build/site/api
}

# checks out and then publishes to gh-pages.
# expects that build was already run and sites exits in build
function docmark_publish {
  clone_gh_pages
  cp -r build/site/. build/gh-pages
  push_gh_pages
}

function publishDocs {
  config_bot_user
  docmark_build
  docmark_publish
}

function dockmark_run {
  docker run --rm -it --name=mkdocs-serve \
    -v $(pwd):/project \
    -p 8000:8000 \
    -e GRGIT_USER=${GRGIT_USER} \
    $DOCMARK_DOCKER_IMAGE $1
}

# use this to open shell and test circle commands
function docmark_shell {
  docker run --rm -it --name=mkdocs-serve \
    -v $(pwd):/project \
    -p 8000:8000 \
    --entrypoint /bin/bash \
    -e GRGIT_USER=${GRGIT_USER} \
    $DOCMARK_DOCKER_IMAGE
}

# --- boiler plate function runner, keep at end of file ------
# BASH_SOURCE check will be true if this is run, false if imported into another script with `source`
if [[ "${#BASH_SOURCE[@]}" == 1 ]]; then
  source "$(dirname $0)/function_runner.sh"
fi
