#!/bin/bash
# -----------------
# functions to help with replacing env vars in template file
# ------------------
set -e

# quick and dirty templating. replaces a defined seat of tags in format ${VAR}
# with env vaiables from the specified source file
# arg $1 - the file to process
# arg $2 - the env file to source
# arg $3+ - the additional vars to pass to the env file
function apply {
  template=$(cat "${1}" | sed -e "s/\${NAME}/$NAME/g" \
    -e "s~\${DOCKER_REPO}~$DOCKER_REPO~g" \
    -e "s/\${IMAGE_TAG}/$IMAGE_TAG/g" \
    -e "s/\${DB_PORT}/$DB_PORT/g" \
    -e "s/\${ING_URL}/$ING_URL/g" \
    -e "s/\${DB_SERVICE_NAME}/$DB_SERVICE_NAME/g" \
    -e "s/\${DB_IMAGE_TAG}/$DB_IMAGE_TAG/g" \
    -e "s/\${DB_PASSWORD}/$DB_PASSWORD/g" \
    -e "s/\${PASS_VAR_NAME}/$PASS_VAR_NAME/g" \
    -e "s/\${APP_NAME}/$APP_NAME/g" \
    -e "s/\${APP_IMAGE_TAG}/$APP_IMAGE_TAG/g" \
    )
  #echo "$template"
  echo "$template" | kubectl apply -f -
}

# kube.sh clean
# deletes the workloads, services etc on rancher. I think in the future we will make it so we can update
function clean {
  kubectl delete deployment,svc --selector=db=$MYSQL_SERVICE_NAME
  kubectl delete deployment,svc --selector=db=$MSSQL_SERVICE_NAME
}

# deploys both the database workload and the app
function deploy {
  init_vars $1
  apply "src/deploy/db-deploy-$1.tpl.yml"
  apply "src/deploy/db-service.tpl.yml"
}

# for CI will run config, clean then deploy
function ci-deploy {
  config $1 $2
  clean
  deploy
}

# boiler plate taken from stackoverflow for running function with args
if declare -f "$1" > /dev/null; then
  # call function with arguments verbatim
  "$@"
else
  # Show a helpful error
  echo "'$1' is not a known function name" >&2
  exit 1
fi
