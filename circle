#!/bin/bash
# ---
# working with circle
# ---

# initialize circle variables
function ciInitVars {
  # for testing uncomment
  # CIRCLE_BRANCH="dev"

  : ${RELEASABLE_BRANCHES:="master|release/.+"}
  IS_RELEASABLE_BRANCH=$( matchReleaseBranch $CIRCLE_BRANCH $RELEASABLE_BRANCHES)
  if [ ${IS_RELEASABLE_BRANCH:+1} ]; then
    echo "IS_RELEASABLE_BRANCH: TRUE as CIRCLE_BRANCH : $CIRCLE_BRANCH matches RELEASABLE_BRANCHES $RELEASABLE_BRANCHES"
  fi

  CIRCLE_COMPARE_URL=$(cat CIRCLE_COMPARE_URL.txt)
  echo "CIRCLE_COMPARE_URL $CIRCLE_COMPARE_URL"
  CIRCLE_COMMIT_RANGE=$(echo "$CIRCLE_COMPARE_URL" | rev | cut -d/ -f1 | rev)
  echo "CIRCLE_COMMIT_RANGE $CIRCLE_COMMIT_RANGE"
  HAS_DOC_CHANGES=$(git diff $CIRCLE_COMMIT_RANGE --name-status | grep -E "(README\.md|mkdocs\.yml|docs/)")
  # app changes if anything other than the doc files have changed
  HAS_APP_CHANGES=$(git diff $CIRCLE_COMMIT_RANGE --name-status | grep -v -E "(README\.md|mkdocs\.yml|docs/)")
  if [ ${HAS_DOC_CHANGES:+1} ]; then
    echo "HAS_DOC_CHANGES: true"
  fi
  if [ ${HAS_APP_CHANGES:+1s} ]; then
    echo "HAS_APP_CHANGES: true"
  fi

}

# publish the docmark docs
function ciPublishDocs {
  ciInitVars
  if [[ "$HAS_DOC_CHANGES" && ${IS_RELEASABLE_BRANCH:+1} ]]; then
    echo "docs have changes and IS_RELEASABLE_BRANCH:true ... calling publishDocs"
    publishDocs
  else
    echo "docs not modified or IS_RELEASABLE_BRANCH:false ... not publishing docs"
  fi
}


# checks if the passed in branch name matches the regex for releasable
# arg $1 - the current branch name
# arg $2 - the releasableBranchRegex
function matchReleaseBranch {
  echo "$1" | grep -E "$2" || true
}

# does th logic for CI to publish the lib
function publishLib {
  ciInitVars
  if [[ "$HAS_APP_CHANGES" && ${IS_RELEASABLE_BRANCH:+1} ]]; then
    echo "docs have changes and IS_RELEASABLE_BRANCH:true ... calling publish"
    # ./gradlew publish
    if [ "$snapshot" == "false" ]; then
      echo "snapshot is false"

      echo "update the changelog"
      updateChangelog $VERSION $previousVersion $CHANGELOG_NAME

      echo "update version in README"
      update_README_version

      echo "create groovyDocs"
      ./gradlew groovydocMerge

      echo "increment the version.properties"
      bumpUpdateVersionProps

    fi
  else
    echo "app not modified or IS_RELEASABLE_BRANCH:false ... not publishing"
  fi
  if [ ${releasableBranch:+1} ]; then
    echo "on a releasableBranch $CIRCLE_BRANCH"
    # ./gradlew publish
    if [ "$snapshot" == "false" ]; then
      echo "snapshot is false"

      echo "update the changelog"
      updateChangelog $VERSION $previousVersion $CHANGELOG_NAME

      echo "update version in README"
      update_README_version

      echo "create groovyDocs"
      ./gradlew groovydocMerge

      echo "increment the version.properties"
      bumpUpdateVersionProps

    fi
  else
    echo "publishLib called and not a releasableBranch"
  fi
}


# --- boiler plate function runner, keep at end of file ------
# BASH_SOURCE check will be true if this is run, false if imported into another script with `source`
if [[ "${#BASH_SOURCE[@]}" == 1 ]]; then
  source "$(dirname $0)/function_runner.sh"
fi
