#!/bin/bash
# -----------------
# some common bash util helpers
# ------------------

# ---
# trims leading and trailing spaces from string
# $1 - the string to trim
# ---
trim() {
    local trimmed="$1"

    # Strip leading spaces.
    while [[ $trimmed == ' '* ]]; do
       trimmed="${trimmed## }"
    done
    # Strip trailing spaces.
    while [[ $trimmed == *' ' ]]; do
        trimmed="${trimmed%% }"
    done

    echo "$trimmed"
}

# build app props from list which will be in form
#  dataSource.host=mysql
#  dataSource.dbName=bar
# turned into -DdataSource.host=mysql -DdataSource.dbName=bar
# $1 - the string to convert into java props
# ---
transform_to_java_props() {
  local sysProps=""
  echo "1 $1"
  while IFS= read -r line; do
    trimLine=$(trim $line)
    # if value of $var starts with #, ignore it
    [[ $trimLine =~ ^#.* ]] && continue
    # if its empty then move on
    [[ -z "$trimLine" ]] && continue

    sysProps+="-D$trimLine "
  done <<< "$1"

  echo "$sysProps"
}

# https://github.com/Jeff-Russ/bash-boolean-helpers/blob/master/bool-helpers.sh
# will echo if its falsy
# to be falsy a value could be false, "false", 0, "0", unset, empty string
# usage:
#   FOO=false
#   [ $(isFalsy "$FOO") ] && echo "FOO is falsy"
function isFalsy {
  local val="$1"
  if [[ ! $val || $val == false || $val = 0 ]]; then
    echo "false"
  fi
  #[ ! "$1" ] && echo "unsetOrEmpty"; [ "$1" = false ] && echo "isFalse"; [ "$1" = 0 ] && echo "is0"
}

# will echo if its not falsy
# usage:
#   FOO="anything not falsy"
#   [ $(isTruthy "$FOO") ] && echo "FOO is truthy"
function isTruthy {
  if [[ ! $(isFalsy "$1") ]]; then
    echo "true"
  fi
}


# ---
# quick and dirty templating. replaces a defined seat of tags in format ${VAR}
# with env vaiables from the specified source file
# $1 - the file name to process
# $2 - the env file to source
# $3 - the additional vars to pass to the env file
# ---
# !DEPRECATED here fror reference only
function applySedTpl {
  template=$(cat "${1}" | sed -e "s/\${NAME}/$NAME/g" \
    -e "s~\${DOCKER_REPO}~$DOCKER_REPO~g" \
    -e "s/\${IMAGE_TAG}/$IMAGE_TAG/g" \
    -e "s/\${DB_PORT}/$DB_PORT/g" \
    -e "s/\${ING_URL}/$ING_URL/g" \
    -e "s/\${DB_SERVICE_NAME}/$DB_SERVICE_NAME/g" \
    -e "s/\${DB_IMAGE_TAG}/$DB_IMAGE_TAG/g" \
    -e "s/\${DB_PASSWORD}/$DB_PASSWORD/g" \
    -e "s/\${PASS_VAR_NAME}/$PASS_VAR_NAME/g" \
    -e "s/\${APP_NAME}/$APP_NAME/g" \
    -e "s/\${APP_IMAGE_TAG}/$APP_IMAGE_TAG/g" \
    )
  #echo "$template"
  echo "$template" | kubectl apply -f -
}
