#!/bin/bash
# ---
# Some common helpers to work with version,
# depends on setVar and that should have been loaded first so it has the setVar
# ---

# ---
# sets the version and sets up the other useful variables for that version such as
# VERX_NO_DOTS and the NINEDB_VERSION
# $1 - version to use
# ---
function setVersion {
  # if nothing passing in the usee the lowercase version that should have come in from version.properties
  local ver=${1:-$version}
  setVar VERSION "$ver"
  # set the BUILD_VERSION for libs to default to version
  local buildVer="$VERSION"
  # if its a snapshot then append the SNAPSHOT
  [ "$snapshot" == "true" ] && buildVer="$VERSION-SNAPSHOT"
  setVar BUILD_VERSION "$buildVer"

  local dotCount=$(echo "${VERSION}" | awk -F"." '{print NF-1}')
  # cuts to the last dot
	local baseVersion=$(echo $VERSION | cut -d. -f1-$dotCount)
  setVar VERSIONX "$baseVersion.x"
  #replace dots with - so 10.0.x turns into v10-0-x. kubernetes can't have dots in names
  setVar VERX_NO_DOTS "v${VERSIONX//./-}"
}

# ---
# increments version so 9.8.7 will return 9.8.8 and 9.8.7-RC.1 returns 9.8.7-RC.2
# $1 - the version to bump
# ---
function bumpPatchLevel {
  local ver=${1:-$VERSION}
  local dotCount=$(echo "${ver}" | awk -F"." '{print NF-1}')
  # cuts to the last dot
	local baseVersion=$(echo $ver | cut -d. -f1-$dotCount)
  # echo "major_and_minor $major_and_minor"
  local endPathLoc=$((dotCount+1))
  # grabs last part of version number
	local patch=$(echo $ver | cut -d. -f$endPathLoc)
  # echo "patch $patch"
	ver=$(printf "%s.%d" $baseVersion $(($patch + 1)))
	echo $ver
}

# bumps the current $VERSION and updates the version.properties
function bumpVersionFile {
  local newVer=$( bumpPatchLevel $VERSION)
  updateVersionFile $newVer
}

# Updates version.properties with given version and sets publishedVersion to the $VERSION
# arg $1 - the new version
function updateVersionFile {
  if [ -n "$1" ] ; then
	  sed -i.x -e "s/^version=.*/version=$1/g" version.properties
    sed -i.x -e "s/^publishedVersion=.*/publishedVersion=$VERSION/g" version.properties
		rm -f version.properties.x
	else
		echo "ERROR: missing version parameter " >&2
		return 1
	fi
}

# updates the version number in README
# arg $1 - the file name to do the replace
function replaceVersionInFile {
  sed -i -e "s|Version: [0-9.]*[-v]*[0-9.]*|Version: ${version}|g" $1

  # updatedContent = updatedContent.replaceFirst(/${p.name}:[\d\.]+[^"]+/, "${p.name}:$version")
  # update any dependencies for plugin style versions, ie `id "yakworks.gorm-tools" version "1.2.3"`
  # updatedContent = updatedContent.replaceFirst(/(?i)${p.name}"\sversion\s"[\d\.]+[^\s]+"/, "${p.name}\" version \"$version\"")
}
